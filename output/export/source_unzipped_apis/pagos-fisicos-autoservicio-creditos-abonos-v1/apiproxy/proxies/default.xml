<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description>API Creditos Abonos</Description>
    <FaultRules>
        <!-- could put additional fault rules here if needed for local proxy -->
    </FaultRules>
    <DefaultFaultRule name="fault-rule">
        <!-- Begin Mediacion de Errores -->
        <Step>
            <Name>FC-Control-Errores-Proxies</Name>
        </Step>
        <!-- End Mediacion de Errores -->
        <!-- Begin Logging -->
        <Step>
            <Name>AM-ProxyEndPoint</Name>
        </Step>
        <Step>
            <Name>JS-ContextFlow</Name>
        </Step>
        <Step>
            <Name>FC-Logging</Name>
        </Step>
        <!-- End Logging -->
        <!-- Begin Políticas -->
        <Step>
            <Name>EV-Estadisticas-Error-Response</Name>
            <Condition>(message.content != null)</Condition>
        </Step>
        <Step>
            <Name>AM-Estadisticas</Name>
        </Step>
        <Step>
            <Name>STATS-Medicion</Name>
        </Step>
        <!-- End Políticas -->
        <AlwaysEnforce>true</AlwaysEnforce>
    </DefaultFaultRule>
    <PreFlow name="PreFlow">
        <Request>
            <!-- Begin Configuracion Log Proxie -->
            <Step>
                <Name>FC-Config-Log-Proxies</Name>
            </Step>
            <!-- End Configuracion Log Proxie -->
            <!-- Begin Logging -->
            <Step>
                <Name>JS-ContextFlow</Name>
            </Step>
            <Step>
                <Name>FC-Logging</Name>
            </Step>
            <!-- End Logging -->
            <!-- Begin Políticas -->
            <Step>
                <Name>FC-Seguridad-Spike-Arrest</Name>
            </Step>
            <Step>
                <Condition>request.verb != "OPTIONS"</Condition>
                <Name>FC-Seguridad-Valida-Access-Token</Name>
            </Step>
            <Step>
                <Name>FC-Seguridad-Inyeccion-Proxies</Name>
            </Step>
            <!-- End Políticas -->
        </Request>
        <Response>
            <!-- Begin Políticas -->
            <!-- End Políticas -->
            <!-- Begin Logging -->
            <Step>
                <Name>JS-ContextFlow</Name>
            </Step>
            <Step>
                <Name>FC-Logging</Name>
            </Step>
            <!-- End Logging -->
        </Response>
    </PreFlow>
    <Flows>
        <Flow name="GET /ping">
            <Condition>(proxy.pathsuffix MatchesPath "/ping") and (request.verb = "GET")</Condition>
            <Description>Verifica la conectividad del API, el estado de despliegue y la latencia</Description>
            <Request>
                <Step>
                    <Name>JS-Calculo-Latencias</Name>
                </Step>
				<Step>
					<Name>AM-Respuesta-Health-Check</Name>
				</Step>
			</Request>
            <Response/>
        </Flow>
        <Flow name="GET /status">
            <Condition>(proxy.pathsuffix MatchesPath "/status") and (request.verb = "GET")</Condition>
            <Description>Verifica la conectividad, el estado y la latencia hacia el backend</Description>
            <Request/>
            <Response/>
        </Flow>
        <Flow name="POST /abonos">
            <Condition>(proxy.pathsuffix MatchesPath "/abonos") and (request.verb = "POST")</Condition>
            <Description/>
            <Request/>
            <Response/>
        </Flow>      
        <Flow name="OptionsPreFlight">
            <Request/>
            <Response>
                <Step>
                    <Name>AM-CORS</Name>
                </Step>
            </Response>
            <Condition>request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null</Condition>
        </Flow>
        <Flow name="Not-Found">
            <Description/>
            <Request>
                <Step>
                    <Name>RF-Respuesta-No-Encontrado</Name>
                </Step>
            </Request>
            <Response/>
        </Flow>
    </Flows>
    <PostFlow name="PostFlow">
        <Request>
            <!-- Begin Conext Flow -->
            <Step>
                <Name>JS-ContextFlow</Name>
            </Step>
            <!-- End Conext Flow -->
            <!-- Begin Políticas -->
            <!-- End Políticas -->
        </Request>
        <Response>
            <!-- Begin Políticas -->
            <Step>
                <Name>AM-Estadisticas</Name>
            </Step>
            <Step>
                <Name>STATS-Medicion</Name>
            </Step>
            <!-- End Políticas -->
            <!-- Begin Logging -->
            <Step>
                <Name>JS-ContextFlow</Name>
            </Step>
            <Step>
                <Name>FC-Logging</Name>
            </Step>
            <!-- End Logging -->
        </Response>
    </PostFlow>
    <PostClientFlow>
        <Response>
            <Step>
                <Condition>(logging.file.enabled equals true) and (message.status.code LesserThan 400)</Condition>
                <Name>ML-Logging-Archivo-Info</Name>
            </Step>
            <Step>
                <Condition>(logging.file.enabled equals true) and (message.status.code GreaterThanOrEquals 400)</Condition>
                <Name>ML-Logging-Archivo-Error</Name>
            </Step>
            <Step>
                <Condition>(logging.loggly.enabled equals true) and (message.status.code LesserThan 400)</Condition>
                <Name>ML-Logging-Loggly-Info</Name>
            </Step>
            <Step>
                <Condition>(logging.loggly.enabled equals true) and (message.status.code GreaterThanOrEquals 400)</Condition>
                <Name>ML-Logging-Loggly-Error</Name>
            </Step>
        </Response>
    </PostClientFlow>
    <HTTPProxyConnection>
        <BasePath>/pagos-fisicos/autoservicio/creditos/abonos/v1</BasePath>
        <VirtualHost>default</VirtualHost>
        <VirtualHost>externo</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="NoRoute">
        <Condition>(request.verb == "OPTIONS" AND request.header.origin != null AND request.header.Access-Control-Request-Method != null) or (request.verb = "GET" and proxy.pathsuffix MatchesPath "/ping")</Condition>
    </RouteRule>
    <RouteRule name="RouteRuleMock">
        <Condition>(environment.name = "sandbox") or (request.header.x-ismock = "true")</Condition>        
        <TargetEndpoint>mock</TargetEndpoint>
    </RouteRule>
    <RouteRule name="status">
        <Condition>(request.verb = "GET" and proxy.pathsuffix MatchesPath "/status")</Condition>    
        <TargetEndpoint>status</TargetEndpoint>
    </RouteRule>
    <RouteRule name="default">
        <TargetEndpoint>default</TargetEndpoint>
    </RouteRule>
</ProxyEndpoint>